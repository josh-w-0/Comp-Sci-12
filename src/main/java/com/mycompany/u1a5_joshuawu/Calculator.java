/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.u1a5_joshuawu;
import java.text.DecimalFormat;
/**
 *
 * @author 335181541
 */
public class Calculator extends javax.swing.JFrame {
    
    /**
     * Creates new form CustomProgram
     */
    public Calculator() {
        initComponents();
    }
    
    public static boolean isNumeric(String str) { //checks if a string is in proper number format
     try {  
        Double i = Double.parseDouble(str);  
        return true;
     } catch(NumberFormatException e){  
        return false;  
     }  
    }
    public void errorMessage(){ //displays error when input is not in number format (ex. 4..7)
        output.setText("Invalid input. Please make sure to enter the number correctly.");
        screen = "";
        anotherOperation = true;
    }
    DecimalFormat df0 = new DecimalFormat("#0"); //different decimal formats
    DecimalFormat df1 = new DecimalFormat("#0.000");
    String operation = ""; //parses operation
    String screen = ""; //reads the output from the calculator screen
    double num; //initial number that is parsed
    boolean anotherOperation = false; //provides the option to use the previously calculated answer
    String[] answerList = new String[10]; //array for textfield consisting of calculator answers
    int index = 0, i; //answer list index, i is counter for a for loop
    public void add( ){ //If an operator is selected, deselects every other operator button, then checks if input is a number
        minus.setSelected(false);
        divide.setSelected(false);
        times.setSelected(false);
    if (isNumeric(screen)) num = Double.parseDouble(screen);
    else errorMessage();
    }
    public void minus( ){ 
        plus.setSelected(false);
        divide.setSelected(false);
        times.setSelected(false);
    if (isNumeric(screen)) num = Double.parseDouble(screen);
    else errorMessage();
    }
    public void times( ){ 
        plus.setSelected(false);
        divide.setSelected(false);
        minus.setSelected(false);
    if (isNumeric(screen)) num = Double.parseDouble(screen);
    else errorMessage();
    }
    public void divide( ){ 
        minus.setSelected(false);
        plus.setSelected(false);
        times.setSelected(false);
    if (isNumeric(screen)) num = Double.parseDouble(screen);
    else errorMessage(); 
    }
    public void setAnswer( ){ //outputs answer into both output and answerList textfields.
    screen = String.valueOf(num);
    if (nodec.isSelected()) 
        output.setText(df0.format(Double.parseDouble(screen)));
    else if (unlimdec.isSelected()) 
        output.setText(screen);
    else 
        output.setText(df1.format(Double.parseDouble(screen)));
    anotherOperation = true;
    if (index < 10)
    {
        if (nodec.isSelected())
            answerList[index] = df0.format(Double.parseDouble(screen));
        else if (unlimdec.isSelected())
            answerList[index] = screen;
        else
            answerList[index] = df1.format(Double.parseDouble(screen));
        answers.append(answerList[index] + "\n");
        index++;
        answerOutput.setText("Added answer to answer list");       
    }
    else
    {
        answerOutput.setText("Max num of answers reached. Please remove an answer first before proceeding.");
    }
        
    }
    public void clearScreen(){ //checks if operator is selected, then clears screen if true, then records operation
    if (plus.isSelected()) {
        screen = "";
        plus.setSelected(false);
        operation = "add";}
    else if (times.isSelected()) {
        screen = "";
        times.setSelected(false);
        operation = "times";}
    else if (minus.isSelected()) {
        screen = "";
        minus.setSelected(false);
        operation = "minus";}
    else if (divide.isSelected()) {
        screen = "";
        divide.setSelected(false);
        operation = "divide";}
    if (anotherOperation) //resets output if equals button was selected before
    {
        anotherOperation = false;
        screen = "";
    }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        specifyDecimals = new javax.swing.ButtonGroup();
        Exit = new javax.swing.JDialog();
        yes = new javax.swing.JButton();
        no = new javax.swing.JButton();
        confirmation = new javax.swing.JLabel();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        decimal = new javax.swing.JButton();
        output = new javax.swing.JFormattedTextField();
        equals = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        divide = new javax.swing.JToggleButton();
        times = new javax.swing.JToggleButton();
        plus = new javax.swing.JToggleButton();
        minus = new javax.swing.JToggleButton();
        unlimdec = new javax.swing.JRadioButton();
        nodec = new javax.swing.JRadioButton();
        threedec = new javax.swing.JRadioButton();
        decimals = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        answers = new javax.swing.JTextArea();
        answerOutput = new javax.swing.JTextField();
        clearTop = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        Exit.setMinimumSize(new java.awt.Dimension(400, 175));

        yes.setText("Yes");
        yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesActionPerformed(evt);
            }
        });

        no.setText("No");
        no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noActionPerformed(evt);
            }
        });

        confirmation.setText("Really exit?");

        javax.swing.GroupLayout ExitLayout = new javax.swing.GroupLayout(Exit.getContentPane());
        Exit.getContentPane().setLayout(ExitLayout);
        ExitLayout.setHorizontalGroup(
            ExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExitLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(yes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(no)
                .addGap(44, 44, 44))
            .addGroup(ExitLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(confirmation)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ExitLayout.setVerticalGroup(
            ExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExitLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(confirmation)
                .addGap(18, 18, 18)
                .addGroup(ExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yes)
                    .addComponent(no))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");

        seven.setText("7");
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        eight.setText("8");
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        nine.setText("9");
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        four.setText("4");
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        five.setText("5");
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        six.setText("6");
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        one.setText("1");
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        two.setText("2");
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        three.setText("3");
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        zero.setText("0");
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        decimal.setText(".");
        decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalActionPerformed(evt);
            }
        });

        output.setEditable(false);

        equals.setText("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        divide.setText("÷");
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        times.setText("×");
        times.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesActionPerformed(evt);
            }
        });

        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        minus.setText("-");
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        specifyDecimals.add(unlimdec);
        unlimdec.setSelected(true);
        unlimdec.setText("Unlimited Decimals");

        specifyDecimals.add(nodec);
        nodec.setText("No Decimals");
        nodec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodecActionPerformed(evt);
            }
        });

        specifyDecimals.add(threedec);
        threedec.setText("Three Decimals");

        decimals.setText("Output");

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        answers.setEditable(false);
        answers.setColumns(20);
        answers.setRows(5);
        jScrollPane1.setViewportView(answers);

        answerOutput.setEditable(false);

        clearTop.setText("Clear Top Answer");
        clearTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTopActionPerformed(evt);
            }
        });

        clearAll.setText("Clear All Answers");
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 0));
        jLabel1.setText("Calculator");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(output)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(zero, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(one))
                                                    .addComponent(four))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(five)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(six)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(times))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(decimal)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(equals))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(two)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(three)))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(plus)
                                                            .addComponent(minus)))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(seven)
                                                .addGap(12, 12, 12)
                                                .addComponent(eight)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(nine)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(divide))
                                            .addComponent(exit))
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(unlimdec)
                                            .addComponent(nodec)
                                            .addComponent(threedec)
                                            .addComponent(clear)
                                            .addComponent(decimals))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(131, 131, 131)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearTop)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(answerOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearAll)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearTop)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seven)
                            .addComponent(eight)
                            .addComponent(nine)
                            .addComponent(clear)
                            .addComponent(divide))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(four)
                            .addComponent(five)
                            .addComponent(six)
                            .addComponent(times)
                            .addComponent(decimals))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(one)
                                    .addComponent(two)
                                    .addComponent(three)
                                    .addComponent(minus))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(zero)
                                    .addComponent(decimal)
                                    .addComponent(equals)
                                    .addComponent(plus))
                                .addGap(18, 18, 18)
                                .addComponent(exit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nodec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(unlimdec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(threedec))))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(answerOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearAll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        clearScreen();
        screen = screen.concat("7");
        output.setText(screen);
    }//GEN-LAST:event_sevenActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        clearScreen();
        screen = screen.concat("5");
        output.setText(screen);
    }//GEN-LAST:event_fiveActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        if (plus.isSelected()) add(); //calls method for deselecting other operators, for every toggle button
    }//GEN-LAST:event_plusActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        if (divide.isSelected()) divide(); //these are toggle buttons.
    }//GEN-LAST:event_divideActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        if (minus.isSelected()) minus();
    }//GEN-LAST:event_minusActionPerformed

    private void timesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timesActionPerformed
        if (times.isSelected()) times();
    }//GEN-LAST:event_timesActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        clearScreen();
        screen = screen.concat("0"); //adds number to the screen
        output.setText(screen);
    }//GEN-LAST:event_zeroActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        clearScreen();
        screen = screen.concat("1");
        output.setText(screen);
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        clearScreen();
        screen = screen.concat("2");
        output.setText(screen);
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        clearScreen();
        screen = screen.concat("3");
        output.setText(screen);
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        clearScreen();
        screen = screen.concat("4");
        output.setText(screen);
    }//GEN-LAST:event_fourActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        clearScreen();
        screen = screen.concat("6");
        output.setText(screen);
    }//GEN-LAST:event_sixActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        clearScreen();
        screen = screen.concat("8");
        output.setText(screen);
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        clearScreen();
        screen = screen.concat("9");
        output.setText(screen);
    }//GEN-LAST:event_nineActionPerformed

    private void decimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decimalActionPerformed
        clearScreen();
        screen = screen.concat(".");
        output.setText(screen);
    }//GEN-LAST:event_decimalActionPerformed

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        if (isNumeric(screen)) { //checks which operation was selected then calculates and outputs the answer
            switch (operation){
            case "add":
            {
                num += Double.parseDouble(screen);
                setAnswer();
                break;
            }
            case "minus":
            {
                num -= Double.parseDouble(screen);
                setAnswer();
                break;
            }
            case "divide":
            {
                num /= Double.parseDouble(screen);
                setAnswer();
                break;
            }
            case "times":
            {
                num *= Double.parseDouble(screen);
                setAnswer();
                break;
            }
            default:
            {
                output.setText("You did not specify an operation.");
                screen = "";
                break;
            }                                
        }
            
        }
        else errorMessage();
        operation = "";
    }//GEN-LAST:event_equalsActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        screen = ""; //clears output
        output.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void nodecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nodecActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        Exit.setVisible(true); //adds exit dialog window, if yes is selected closes the program, if no is selected closes the window
    }//GEN-LAST:event_exitActionPerformed

    private void yesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesActionPerformed
        System.exit(0);
    }//GEN-LAST:event_yesActionPerformed

    private void noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noActionPerformed
        Exit.setVisible(false);
    }//GEN-LAST:event_noActionPerformed

    private void clearTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTopActionPerformed
    answers.setText(""); //clears the top number from the answer list.
    if (index >= 1)
    {
        index--;
        for (i = 0; i<=index-1; i++)
        {
            answerList[i] = answerList[i+1];
            answers.append(answerList[i] + "\n");
        }
    if (index == 9)
        answerList[9] = null;
    else
        answerList[index+1] = null;
    answerOutput.setText("Removed top answer from answer list");
    }
    else answerOutput.setText("No answers to remove.");
    }//GEN-LAST:event_clearTopActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
    if (index >= 1) //clears all answers from the answer list
    {
        for (i = 0; i<=index-1; i++)
        {
            answerList[i] = null;
        }
        answers.setText("");
        index = 0;
        answerOutput.setText("Removed all answers from answer list");
    }
    else answerOutput.setText("No answers to remove.");
    }//GEN-LAST:event_clearAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Exit;
    private javax.swing.JTextField answerOutput;
    private javax.swing.JTextArea answers;
    private javax.swing.JButton clear;
    private javax.swing.JButton clearAll;
    private javax.swing.JButton clearTop;
    private javax.swing.JLabel confirmation;
    private javax.swing.JButton decimal;
    private javax.swing.JLabel decimals;
    private javax.swing.JToggleButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton exit;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton minus;
    private javax.swing.JButton nine;
    private javax.swing.JButton no;
    private javax.swing.JRadioButton nodec;
    private javax.swing.JButton one;
    private javax.swing.JFormattedTextField output;
    private javax.swing.JToggleButton plus;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.ButtonGroup specifyDecimals;
    private javax.swing.JButton three;
    private javax.swing.JRadioButton threedec;
    private javax.swing.JToggleButton times;
    private javax.swing.JButton two;
    private javax.swing.JRadioButton unlimdec;
    private javax.swing.JButton yes;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}

