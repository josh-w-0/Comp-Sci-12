/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.u2a4_joshuawu;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Scanner;
/**
 *
 * @author 335181541
 */
public class GroceryInventory extends javax.swing.JFrame {

    /**
     * Creates new form GroceryInventory
     */
    public GroceryInventory() {
        initComponents();
    }
  public static String[] readFromFile(){ //reads from inventory.txt and outputs each line as an element of an array
    
    String outputAsString = "";
    String [] outputAsArray;
    
    try {
      File file = new File("inventory.txt"); //Creation of file object
      Scanner fileInput = new Scanner(file); //Scanner can also be used to read information from a file. 

      while (fileInput.hasNextLine()){
        outputAsString += fileInput.nextLine()+"\n"; //Converting the file into one large string which can be split into an array of strings later on.
      }
      
      fileInput.close(); //Closing the scanner to prevent memory leaks.
        
      
    } catch (FileNotFoundException e) {
      System.out.println("An error occurred."); //This would happen if something goes wrong such as the file does not exist. 
    }
     
    outputAsArray = outputAsString.split("\n"); //Converting the string into an array of strings delimited (look up that word if you don't know what it is) by the by the end of line character (\n). Remember the .split() commend for the future (maybe for a test??).  
    
    return outputAsArray;
    
  }
  //This method will open the txt in write mode. This method has one string argument which represents the line which the user would like to add to the file. This method returns nothing.  
  public static void writeToFile(String newLine){ //Writes the specified string into the file inventory.txt
    
    try { 
      
      //To open the file in write mode we are using a three step process. 
      //1. Create File Object
      //2. Create FileOutputSteam Object which takes in File Object as the argument. 
      //3. Create PrintWrite Object which takes in the FileOutputSteam Object as the argument. 
      
      FileWriter myWriter = new FileWriter("inventory.txt", false);
     
      myWriter.write(newLine);
      myWriter.close();
      
    } catch (IOException e) {
      System.out.println("An error occurred.");
    }
    
    }
    public static boolean isPositiveInt(String str) { //checks if number is postive integer between 1 and 9999
     try {  
        Integer i = Integer.parseInt(str);  
        return (i>0 && i<10000);
     } catch(NumberFormatException e){  
        return false;  
     }  
    }
    public static boolean isPositiveDouble(String str) { //checks if number is a postive double
     try {  
        Double i = Double.parseDouble(str);  
        return (i>0);
     } catch(NumberFormatException e){  
        return false;  
     }  
    }
    public static double round(double value, int places) { //rounds a double number
        if (places < 0) throw new IllegalArgumentException();
        BigDecimal bd = BigDecimal.valueOf(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        read = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        foodList = new javax.swing.JTextArea();
        title = new javax.swing.JLabel();
        output = new javax.swing.JTextField();
        skuType = new javax.swing.JComboBox<>();
        dash = new javax.swing.JLabel();
        skuNums = new javax.swing.JTextField();
        nameInput = new javax.swing.JTextField();
        foodTitle = new javax.swing.JLabel();
        query = new javax.swing.JButton();
        sku = new javax.swing.JRadioButton();
        name = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        foundItems = new javax.swing.JTextArea();
        quantityTitle = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        minQuantityTitle = new javax.swing.JLabel();
        minQuantity = new javax.swing.JTextField();
        vPriceTitle = new javax.swing.JLabel();
        vPrice = new javax.swing.JTextField();
        markupTitle = new javax.swing.JLabel();
        markup = new javax.swing.JTextField();
        discount = new javax.swing.JTextField();
        discountTitle = new javax.swing.JLabel();
        addFood = new javax.swing.JButton();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grocery Inventory");

        read.setText("Read File");
        read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readActionPerformed(evt);
            }
        });

        foodList.setEditable(false);
        foodList.setColumns(20);
        foodList.setRows(5);
        jScrollPane1.setViewportView(foodList);
        String[] list = readFromFile();
        for (String str: list){
            String[] vars = str.split(",");
            itemList.add(new Item(vars[0],vars[1],vars[2],
                Integer.parseInt(vars[3]),Integer.parseInt(vars[4]),Double.parseDouble(vars[5]),
                Double.parseDouble(vars[6]),Double.parseDouble(vars[7]),
                Double.parseDouble(vars[8]),Double.parseDouble(vars[9])));
        foodList.append(itemList.get(itemList.size()-1).toString() + "\n");
    }

    title.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    title.setText("Grocery Store Inventory");

    output.setEditable(false);

    skuType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FRU", "VEG", "MEA" }));
    skuType.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            skuTypeActionPerformed(evt);
        }
    });

    dash.setText("-");

    skuNums.setText(df.format(Item.getFruNum()));
    skuNums.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            skuNumsActionPerformed(evt);
        }
    });

    nameInput.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            nameInputActionPerformed(evt);
        }
    });

    foodTitle.setText("Food Name:");

    query.setText("Search Food");
    query.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            queryActionPerformed(evt);
        }
    });

    buttonGroup1.add(sku);
    sku.setSelected(true);
    sku.setText("by SKU");

    buttonGroup1.add(name);
    name.setText("by Name");

    foundItems.setEditable(false);
    foundItems.setColumns(20);
    foundItems.setRows(5);
    jScrollPane2.setViewportView(foundItems);

    quantityTitle.setText("Quantity:");

    minQuantityTitle.setText("Min Quantity:");

    vPriceTitle.setText("Vendor Price:");

    markupTitle.setText("Markup%:");

    discountTitle.setText("Discount%");

    addFood.setText("Add Food");
    addFood.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addFoodActionPerformed(evt);
        }
    });

    save.setText("Save to File");
    save.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(read)
                        .addGap(84, 84, 84)
                        .addComponent(title))
                    .addComponent(output)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(quantityTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(minQuantityTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(skuType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dash)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(skuNums, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(foodTitle)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addFood)
                            .addComponent(query)
                            .addComponent(save)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(123, 123, 123)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sku, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(vPriceTitle)
                        .addComponent(discountTitle))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(vPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                        .addComponent(discount))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(markupTitle)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(markup, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(26, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(15, 15, 15)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(read)
                .addComponent(title))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(skuType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(dash)
                .addComponent(skuNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(foodTitle)
                .addComponent(query))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(sku)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(name))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(quantityTitle)
                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(minQuantityTitle)
                .addComponent(minQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(vPriceTitle)
                .addComponent(vPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(markupTitle)
                .addComponent(markup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(addFood))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(discountTitle)
                .addComponent(save))
            .addContainerGap(11, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    ArrayList<Item> itemList = new ArrayList<>();
    DecimalFormat df = new DecimalFormat("0000");
    private void readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readActionPerformed
        String[] list = readFromFile();
        itemList.clear();
        Item.clearItemNums();
        foodList.setText("");
        for (String str: list){
        String[] vars = str.split(",");
        itemList.add(new Item(vars[0],vars[1],vars[2],
                Integer.parseInt(vars[3]),Integer.parseInt(vars[4]),Double.parseDouble(vars[5]),
                Double.parseDouble(vars[6]),Double.parseDouble(vars[7]),
                Double.parseDouble(vars[8]),Double.parseDouble(vars[9])));
        foodList.append(itemList.get(itemList.size()-1).toString() + "\n");
        }
        output.setText("Read from inventory.txt");
    }//GEN-LAST:event_readActionPerformed

    private void skuTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skuTypeActionPerformed
        if (skuType.getSelectedItem().equals("FRU")){
            skuNums.setText(df.format(Item.getFruNum()));
        }        
        else if (skuType.getSelectedItem().equals("VEG")){
            skuNums.setText(df.format(Item.getVegNum()));
        }
        else if (skuType.getSelectedItem().equals("MEA")){
            skuNums.setText(df.format(Item.getMeaNum()));
        }
    }//GEN-LAST:event_skuTypeActionPerformed

    private void nameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameInputActionPerformed

    private void queryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryActionPerformed
        String str3 = skuNums.getText();
        String str2;
        boolean itemFound = false;
        if (sku.isSelected()){
            if (isPositiveInt(str3)){
            int skuNumber = Integer.parseInt(str3);
            String str1 = skuType.getSelectedItem() + "-" + df.format(skuNumber);
            foundItems.setText("");
                for (int i = 0; i<itemList.size();i++){
                    str2 = itemList.get(i).getSku();
                    if (str1.equals(str2)){
                        foundItems.append(itemList.get(i).toString() + "\n");
                        itemFound = true;  
                        break;
                }
            }
            if (!itemFound){
            output.setText("No items were found");
            }
            }
            else output.setText("Please input a positive integer between 1 and 9999 for SKU.");
        }    
        else if (name.isSelected()){
                str2 = nameInput.getText().toLowerCase();
                int nameSize = str2.length();
                foundItems.setText("");
                for (int i = 0; i<itemList.size();i++){
                    str3 = itemList.get(i).getName();
                    if (nameSize<=str3.length()&& str2.equals(str3.substring(0,nameSize).toLowerCase())){
                        foundItems.append(itemList.get(i).toString() + "\n");
                        itemFound = true;                        
                    }
                }
                if (!itemFound){
                output.setText("No items were found");
                }
            }
        


    }//GEN-LAST:event_queryActionPerformed

    private void addFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFoodActionPerformed
        String str1 = skuNums.getText(), str2 = nameInput.getText(), str3 = quantity.getText(),
                str4 = minQuantity.getText(), str5 = vPrice.getText(), str6 = markup.getText(),
                str7 = discount.getText(), str8 = skuType.getSelectedItem().toString(); //read all string inputs from GUI
        boolean AllTestsTrue = true, skuTrue = true;
        if (str2.equals("") || str2.length()>20){
            output.setText("Name cannot be empty or over 20 characters");
            AllTestsTrue = false;
        }
        if (isPositiveInt(str3) && isPositiveInt(str4)){
            int quan = Integer.parseInt(str3), minQuan = Integer.parseInt(str4);
            if (quan <= minQuan){
                output.setText("Quantity has to be larger than min quantity");
                AllTestsTrue = false;
            }
        }
        else{
            output.setText("Quantities has to be positive intgers under 10000");
            AllTestsTrue = false;
        }
        if (!isPositiveDouble(str5) || !isPositiveDouble(str6) || !isPositiveDouble(str7)){
            output.setText("Vendor price, markup and discount must be positive double");
            AllTestsTrue = false;
        }
        if (AllTestsTrue){
            String skuName = str8 + "-" + str1, skuFullName;
            int quantityInt = Integer.parseInt(str3);
            int minQuantityInt = Integer.parseInt(str4);
            double vPriceNum = round(Double.parseDouble(str5),2);
            double markupNum = round(Double.parseDouble(str6),2);
            double discountNum = round(Double.parseDouble(str7),2);
            double regPrice = round(vPriceNum*(1+(markupNum/100)),2);
            double curPrice = round(regPrice*(1-(discountNum/100)),2);
            switch (str8){
                case "FRU" ->{ 
                    if (Integer.parseInt(str1)!= Item.getFruNum()){
                        skuTrue = false;
                    }
                    else {
                    skuFullName = "FRUIT";
                    itemList.add(Item.getFruNum()-1,
                            new Item(skuName, str2, skuFullName, quantityInt, 
                                    minQuantityInt, vPriceNum, markupNum, 
                                            regPrice,discountNum, curPrice));
                    skuNums.setText(df.format(Item.getFruNum()));    
                    }
                }
                case "VEG" -> {
                    if (Integer.parseInt(str1)!= Item.getVegNum()){
                        skuTrue = false;
                    }
                    else {
                    skuFullName = "VEGETABLE";
                    itemList.add(Item.getVegNum()-2,
                            new Item(skuName, str2, skuFullName, quantityInt, 
                                    minQuantityInt, vPriceNum, markupNum, 
                                            regPrice,discountNum, curPrice));
                    skuNums.setText(df.format(Item.getVegNum()));    
                    }
                }
                case "MEA" -> {
                    if (Integer.parseInt(str1)!= Item.getMeaNum()){
                        skuTrue = false;
                    }
                    else {
                    skuFullName = "MEAT";
                    itemList.add(new Item(skuName, str2, skuFullName, quantityInt, 
                                    minQuantityInt, vPriceNum, markupNum, 
                                            regPrice,discountNum, curPrice));
                    skuNums.setText(df.format(Item.getMeaNum()));    
                    }
                }
            }
            foodList.setText("");
                for (int i = 0; i<itemList.size();i++){
                    foodList.append(itemList.get(i).toString()+"\n");
                }
            if (!skuTrue){
                output.setText("SKU has to be 1 more than last specified category");
            }
            else{
                output.setText("Food added");                
            }
            
        }
        
    }//GEN-LAST:event_addFoodActionPerformed

    private void skuNumsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skuNumsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skuNumsActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        String totalList = "";
            for (int i = 0; i<itemList.size();i++){
                totalList = totalList+itemList.get(i).toString()+"\n";
            }
        writeToFile(totalList);
        output.setText("Written to inventory.txt");
    }//GEN-LAST:event_saveActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GroceryInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GroceryInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GroceryInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GroceryInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GroceryInventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFood;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel dash;
    private javax.swing.JTextField discount;
    private javax.swing.JLabel discountTitle;
    private javax.swing.JTextArea foodList;
    private javax.swing.JLabel foodTitle;
    private javax.swing.JTextArea foundItems;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField markup;
    private javax.swing.JLabel markupTitle;
    private javax.swing.JTextField minQuantity;
    private javax.swing.JLabel minQuantityTitle;
    private javax.swing.JRadioButton name;
    private javax.swing.JTextField nameInput;
    private javax.swing.JTextField output;
    private javax.swing.JTextField quantity;
    private javax.swing.JLabel quantityTitle;
    private javax.swing.JButton query;
    private javax.swing.JButton read;
    private javax.swing.JButton save;
    private javax.swing.JRadioButton sku;
    private javax.swing.JTextField skuNums;
    private javax.swing.JComboBox<String> skuType;
    private javax.swing.JLabel title;
    private javax.swing.JTextField vPrice;
    private javax.swing.JLabel vPriceTitle;
    // End of variables declaration//GEN-END:variables
}
