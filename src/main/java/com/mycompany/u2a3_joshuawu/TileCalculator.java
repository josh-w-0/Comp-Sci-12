/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.u2a3_joshuawu;

import java.text.DecimalFormat;
import java.util.ArrayList;

/**
 *
 * @author 335181541
 */
public class TileCalculator extends javax.swing.JFrame {
   
    /**
     * Creates new form TileCalculator
     */
    public TileCalculator() {
        initComponents();
    }
    public static boolean isPositiveDouble(String str) { 
     try {  
        Double i = Double.parseDouble(str);  
        return (i>0);
     } catch(NumberFormatException e){  
        return false;  
     }  
    }
    public static boolean isPositiveInt(String str) { 
     try {  
        Integer i = Integer.parseInt(str);  
        return (i>0);
     } catch(NumberFormatException e){  
        return false;  
     }  
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shapeType = new javax.swing.ButtonGroup();
        rectangle = new javax.swing.JRadioButton();
        parallelogram = new javax.swing.JRadioButton();
        triangle = new javax.swing.JRadioButton();
        circle = new javax.swing.JRadioButton();
        donut = new javax.swing.JRadioButton();
        rectFrame = new javax.swing.JRadioButton();
        trapezoid = new javax.swing.JRadioButton();
        title = new javax.swing.JLabel();
        dimen1 = new javax.swing.JLabel();
        dimen2 = new javax.swing.JLabel();
        selectShape = new javax.swing.JLabel();
        dimen3 = new javax.swing.JLabel();
        input1 = new javax.swing.JTextField();
        input2 = new javax.swing.JTextField();
        input3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        shapes = new javax.swing.JTextArea();
        output = new javax.swing.JTextField();
        addShape = new javax.swing.JButton();
        titleShape = new javax.swing.JLabel();
        area = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        shapeIndex = new javax.swing.JTextField();
        titleIndex = new javax.swing.JLabel();
        priceTitle = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        cost = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        priceSet = new javax.swing.JButton();
        dimen4 = new javax.swing.JLabel();
        input4 = new javax.swing.JTextField();
        clearList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tile Calculator");

        shapeType.add(rectangle);
        rectangle.setText("Rectangle");
        rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleActionPerformed(evt);
            }
        });

        shapeType.add(parallelogram);
        parallelogram.setText("Parallelogram");
        parallelogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelogramActionPerformed(evt);
            }
        });

        shapeType.add(triangle);
        triangle.setText("Triangle");
        triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleActionPerformed(evt);
            }
        });

        shapeType.add(circle);
        circle.setText("Circle");
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleActionPerformed(evt);
            }
        });

        shapeType.add(donut);
        donut.setText("Donut");
        donut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donutActionPerformed(evt);
            }
        });

        shapeType.add(rectFrame);
        rectFrame.setText("Rectangle Frame");
        rectFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectFrameActionPerformed(evt);
            }
        });

        shapeType.add(trapezoid);
        trapezoid.setText("Trapezoid");
        trapezoid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trapezoidActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        title.setForeground(new java.awt.Color(204, 204, 0));
        title.setText("Tile Caclulator");

        dimen1.setText("Length:");

        dimen2.setText("Width:");

        selectShape.setText("Please select a shape:");

        input1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input1ActionPerformed(evt);
            }
        });

        input2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input2ActionPerformed(evt);
            }
        });

        input3.setVisible(false);
        input3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input3ActionPerformed(evt);
            }
        });

        shapes.setEditable(false);
        shapes.setColumns(20);
        shapes.setRows(5);
        jScrollPane1.setViewportView(shapes);

        output.setEditable(false);
        output.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputActionPerformed(evt);
            }
        });

        addShape.setText("Add Shape");
        addShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addShapeActionPerformed(evt);
            }
        });

        titleShape.setText("List of Shapes:");

        area.setText("Total Area");
        area.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaActionPerformed(evt);
            }
        });

        remove.setText("Remove Shape");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        titleIndex.setText("Shape Index:");

        priceTitle.setText("Unit Price ($/sqr cm): not set");

        cost.setText("Calculate Cost");
        cost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costActionPerformed(evt);
            }
        });

        jLabel1.setText("Units in cm.");

        priceSet.setText("Set Price");
        priceSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSetActionPerformed(evt);
            }
        });

        input4.setVisible(false);
        input4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input4ActionPerformed(evt);
            }
        });

        clearList.setText("Clear Shape List");
        clearList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectShape)
                        .addGap(18, 18, 18)
                        .addComponent(title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rectangle)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(titleShape)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(output))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rectFrame)
                                            .addComponent(trapezoid))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(titleIndex)
                                            .addComponent(shapeIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(9, 9, 9)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(addShape)
                                            .addComponent(remove)
                                            .addComponent(area)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(priceSet)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cost))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(priceTitle)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(parallelogram)
                                                    .addComponent(triangle)
                                                    .addComponent(circle)
                                                    .addComponent(donut))
                                                .addGap(29, 29, 29)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(dimen3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(dimen2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(dimen1, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                                                    .addComponent(dimen4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(clearList)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(input4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(input3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))))))))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title)
                    .addComponent(selectShape))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rectangle)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parallelogram)
                    .addComponent(dimen1)
                    .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(triangle)
                    .addComponent(dimen2)
                    .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(circle)
                        .addGap(12, 12, 12)
                        .addComponent(donut))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dimen3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(input3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dimen4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(input4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rectFrame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trapezoid)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(priceTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addShape)
                            .addComponent(titleIndex))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remove)
                            .addComponent(shapeIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(area)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearList)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cost)
                    .addComponent(priceSet))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titleShape)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String shape;
    ArrayList<Shape> shapeList = new ArrayList<>();
    DecimalFormat df = new DecimalFormat("#0.00");
    private void triangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleActionPerformed
        dimen1.setText("Base:");
        dimen2.setText("Height:");
        dimen3.setText("");
        dimen4.setText("");
        shape = "triangle";
        input2.setVisible(true);        
        input3.setVisible(false);
        input4.setVisible(false);
    }//GEN-LAST:event_triangleActionPerformed

    private void rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleActionPerformed
        dimen1.setText("Length:");
        dimen2.setText("Width:");
        dimen3.setText("");
        dimen4.setText("");
        shape = "rectangle";
        input2.setVisible(true);
        input3.setVisible(false);
        input4.setVisible(false);
    }//GEN-LAST:event_rectangleActionPerformed

    private void input1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input1ActionPerformed

    private void input3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input3ActionPerformed

    private void input2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input2ActionPerformed

    private void circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleActionPerformed
        dimen1.setText("Radius:");
        dimen2.setText("");
        dimen3.setText("");
        dimen4.setText("");
        shape = "circle";
        input2.setVisible(false);
        input3.setVisible(false);
        input4.setVisible(false);
    }//GEN-LAST:event_circleActionPerformed

    private void parallelogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelogramActionPerformed
        dimen1.setText("Base:");
        dimen2.setText("Height:");
        dimen3.setText("");
        dimen4.setText("");
        shape = "parallelogram";
        input2.setVisible(true);
        input3.setVisible(false);
        input4.setVisible(false);
    }//GEN-LAST:event_parallelogramActionPerformed

    private void donutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donutActionPerformed
        dimen1.setText("Inner Radius:");
        dimen2.setText("Outer Radius:");
        dimen3.setText("");
        dimen4.setText("");
        shape = "donut";
        input2.setVisible(true);
        input3.setVisible(false);
        input4.setVisible(false);
    }//GEN-LAST:event_donutActionPerformed

    private void outputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputActionPerformed

    private void rectFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectFrameActionPerformed
        dimen1.setText("Inner Length:");
        dimen2.setText("Inner Width:");
        dimen3.setText("Outer Length:");
        dimen4.setText("Outer Width:");
        shape = "rectFrame";
        input2.setVisible(true);
        input3.setVisible(true);
        input4.setVisible(true);
    }//GEN-LAST:event_rectFrameActionPerformed

    private void addShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addShapeActionPerformed
        String str1 = input1.getText();
        String str2 = input2.getText();
        String str3 = input3.getText();
        String str4 = input4.getText();
        switch(shape){
            case "circle":
                if (isPositiveDouble(str1))
                {
                    shapeList.add(new Circle(Double.parseDouble(str1)));
                    shapes.append((shapeList.size())+ ". " + shapeList.get(shapeList.size()-1).toString() + "\n" );
                    output.setText("Shape added");
                }
                else output.setText("Input is not a number");
                break;
            case "donut":
                if (isPositiveDouble(str1) && isPositiveDouble(str2))
                {
                    if (Double.parseDouble(str1) < Double.parseDouble(str2)) {
                    shapeList.add(new Donut(Double.parseDouble(str1), Double.parseDouble(str2)));
                    shapes.append((shapeList.size())+ ". " + shapeList.get(shapeList.size()-1).toString() + "\n" );
                    output.setText("Shape added");
                    }
                    else output.setText("Inner radius CANNOT be larger than outer radius");
                }
                else output.setText("Input is not a number");
                break;
            case "parallelogram":
                if (isPositiveDouble(str1) && isPositiveDouble(str2))
                {
                    shapeList.add(new Parallelogram(Double.parseDouble(str1), Double.parseDouble(str2)));
                    shapes.append((shapeList.size())+ ". " + shapeList.get(shapeList.size()-1).toString() + "\n" );
                    output.setText("Shape added");
                }
                else output.setText("Input is not a number");
                break;
            case "rectangle":
                if (isPositiveDouble(str1) && isPositiveDouble(str2))
                {
                    shapeList.add(new Rectangle(Double.parseDouble(str1), Double.parseDouble(str2)));
                    shapes.append((shapeList.size())+ ". " + shapeList.get(shapeList.size()-1).toString() + "\n" );
                    output.setText("Shape added");
                }
                else output.setText("Input is not a number");
                break;
            case "triangle":
                if (isPositiveDouble(str1) && isPositiveDouble(str2))
                {
                    shapeList.add(new Triangle(Double.parseDouble(str1), Double.parseDouble(str2)));
                    shapes.append((shapeList.size())+ ". " + shapeList.get(shapeList.size()-1).toString() + "\n" );
                    output.setText("Shape added");
                }
                else output.setText("Input is not a number");
                break;
            case "rectFrame":
                if (isPositiveDouble(str1) && isPositiveDouble(str2) && isPositiveDouble(str3) && isPositiveDouble(str4))
                {
                    if (Double.parseDouble(str1) < Double.parseDouble(str3) && Double.parseDouble(str2) < Double.parseDouble(str4)) {
                    shapeList.add(new RectangleFrame(Double.parseDouble(str1), Double.parseDouble(str2),Double.parseDouble(str3), Double.parseDouble(str4)));
                    shapes.append((shapeList.size())+ ". " + shapeList.get(shapeList.size()-1).toString() + "\n" );
                    output.setText("Shape added");
                    }
                    else output.setText("Please doublecheck inputs. Either inner length >= outer length or in width >= out width.");
                }
                else output.setText("Input is not a number");
                break;
            case "trapezoid":
                if (isPositiveDouble(str1) && isPositiveDouble(str2) && isPositiveDouble(str3))
                {
                    shapeList.add(new Trapezoid(Double.parseDouble(str1), Double.parseDouble(str2), Double.parseDouble(str3)));
                    shapes.append((shapeList.size())+ ". " + shapeList.get(shapeList.size()-1).toString() + "\n" );
                    output.setText("Shape added");
                }
                else output.setText("Input is not a number");
                break;                
            default:
                output.setText("Please select a shape.");
                break;
        }
    }//GEN-LAST:event_addShapeActionPerformed

    private void areaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaActionPerformed
        double totalArea = 0;
        if (!shapeList.isEmpty()) {
            for (int i = 0; i<shapeList.size(); i++){
            totalArea += shapeList.get(i).getArea();
        }
        output.setText("Total area is " + df.format(totalArea) + "cm\u00B2.");
        }
        else output.setText("Please add a shape first.");
    }//GEN-LAST:event_areaActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        String indexShape = shapeIndex.getText();
        if (isPositiveInt(indexShape)){
            int index = Integer.parseInt(indexShape);
            if (index <= shapeList.size()){
                shapeList.remove(index-1);
                output.setText("Shape was removed");
                shapes.setText("");
                for (int i = 0; i<shapeList.size(); i++)
                {
                    shapes.append((i+1)+ ". " + shapeList.get(i).toString() + "\n" );    
                }
            }
            else output.setText("Index not in shape list. Please input a valid index");
        }
        else output.setText("Please input a valid number for the index.");
    }//GEN-LAST:event_removeActionPerformed

    private void costActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costActionPerformed
        if (Shape.getUnitPrice () != -1){
            double totalArea = 0;
            if (!shapeList.isEmpty()) {
            for (int i = 0; i<shapeList.size(); i++){
            totalArea += shapeList.get(i).getArea();
            }
            output.setText("Total tile price cost is " + df.format(Shape.getUnitPrice()*totalArea) + "$.");
            }
            else output.setText("No shapes in list");
        }
        else output.setText("You have not set the unit price yet.");
    }//GEN-LAST:event_costActionPerformed

    private void priceSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSetActionPerformed
        String unitPrice = price.getText();
        if (isPositiveDouble(unitPrice)){
            double costNumber = Double.parseDouble(unitPrice);
            Shape.setUnitPrice(costNumber);
            output.setText("Unit price was set");
            priceTitle.setText("Unit Price ($/sqr cm): " + df.format(costNumber) + "$");
        }
        else output.setText("Invalid number. Please input a number greater than 0");
    }//GEN-LAST:event_priceSetActionPerformed

    private void input4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input4ActionPerformed

    private void trapezoidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trapezoidActionPerformed
        dimen1.setText("Bottom Base:");
        dimen2.setText("Top Base:");
        dimen3.setText("Height:");
        dimen4.setText("");
        shape = "trapezoid";
        input2.setVisible(true);
        input3.setVisible(true);
        input4.setVisible(false);
    }//GEN-LAST:event_trapezoidActionPerformed

    private void clearListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearListActionPerformed
        shapeList.clear();
        shapes.setText("");
        output.setText("Cleared shape list");
    }//GEN-LAST:event_clearListActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TileCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addShape;
    private javax.swing.JButton area;
    private javax.swing.JRadioButton circle;
    private javax.swing.JButton clearList;
    private javax.swing.JButton cost;
    private javax.swing.JLabel dimen1;
    private javax.swing.JLabel dimen2;
    private javax.swing.JLabel dimen3;
    private javax.swing.JLabel dimen4;
    private javax.swing.JRadioButton donut;
    private javax.swing.JTextField input1;
    private javax.swing.JTextField input2;
    private javax.swing.JTextField input3;
    private javax.swing.JTextField input4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField output;
    private javax.swing.JRadioButton parallelogram;
    private javax.swing.JTextField price;
    private javax.swing.JButton priceSet;
    private javax.swing.JLabel priceTitle;
    private javax.swing.JRadioButton rectFrame;
    private javax.swing.JRadioButton rectangle;
    private javax.swing.JButton remove;
    private javax.swing.JLabel selectShape;
    private javax.swing.JTextField shapeIndex;
    private javax.swing.ButtonGroup shapeType;
    private javax.swing.JTextArea shapes;
    private javax.swing.JLabel title;
    private javax.swing.JLabel titleIndex;
    private javax.swing.JLabel titleShape;
    private javax.swing.JRadioButton trapezoid;
    private javax.swing.JRadioButton triangle;
    // End of variables declaration//GEN-END:variables
}
